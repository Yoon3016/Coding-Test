숫자 0과 1로만 이루어진 n * n 크기의 격자 상태가 주어집니다. 각 칸 중 상하좌우로 인접한 칸 중 숫자 1이 적혀 있는 칸의 수가 3개 이상인 곳의 개수를 세는 프로그램을 작성해보세요. 단, 인접한 곳이 격자를 벗어나는 경우에는 숫자 1이 적혀있지 않은 것으로 생각합니다.

입력 형식
첫 번째 줄에 n이 주어집니다.

두 번째 줄부터는 n개의 줄에 걸쳐 각 줄마다 각각의 행에 해당하는 n개의 숫자가 공백을 사이에 두고 주어집니다. 전부 0과 1로 이루어져 있다고 가정해도 좋습니다.

1 ≤ n ≤ 100
출력 형식
인접한 칸에 숫자 1이 3개 이상 적혀있는 서로 다른 칸의 수를 출력합니다.

입출력 예제
예제1
입력:

4
0 1 0 1
0 0 1 1
0 1 0 1
0 0 1 0
출력:

4

--------------------------------------

#include <stdio.h>

int check_arrSize(int num, int maxSize); // 배열 사이즈 넘어가지 않도록 체크 함수
int main()
{
	int arr[1000][1000];
	int size;
	int x, y;
	int check = 0;
	int point = 0;
	scanf("%d", &size);
	for (int i = 0; i < size; i++)
	{
		for (int j = 0; j < size; j++)
		{
			scanf("%d", &arr[i][j]);
		}
	}
	for (int i = 0; i < size; i++)
	{
		for (int j = 0; j < size; j++)
		{
			if (check_arrSize(j - 1, size))
			{
				if (arr[i][j - 1] == 1)check++;
			}
			if (check_arrSize(j + 1, size))
			{
				if (arr[i][j + 1] == 1)check++;
			}
			if (check_arrSize(i + 1, size))
			{
				if (arr[i+1][j] == 1)check++;
			}
			if (check_arrSize(i-1, size))
			{
				if (arr[i-1][j] == 1)check++;
			}
			if (check >= 3)
			{
				point++;
			}
			check = 0;
		}
	}
	printf("%d", point);

	return 0;
}


int check_arrSize(int num, int maxSize)
{
	return (num >= 0 && num < maxSize);
}
